#!/usr/bin/env python3
"""
AION - AI Self-Improvement System
–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import argparse
import json
import os
import requests
from datetime import datetime
import sys

class AIONCore:
    """–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã AION"""
    
    def __init__(self):
        self.log_file = 'aion_log.json'
        self.stats = self._load_stats()
    
    def _load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if os.path.exists(self.log_file):
            try:
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        return {'runs': [], 'total_projects': 0, 'total_files': 0}
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def analyze_github(self, projects=None):
        """–ë–´–°–¢–†–´–ô –∞–Ω–∞–ª–∏–∑ GitHub –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        if not projects:
            projects = ['AutoGPT', 'transformers']  # –¢–æ–ª—å–∫–æ 2 –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        print("üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ GitHub:")
        found_projects = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 –ø—Ä–æ–µ–∫—Ç–æ–≤
        for project in projects[:2]:
            try:
                print(f"   –ü—Ä–æ–≤–µ—Ä—è—é {project}...", end=' ')
                
                url = "https://api.github.com/search/repositories"
                params = {
                    'q': f"{project} language:python",
                    'sort': 'stars',
                    'per_page': 1
                }
                
                response = requests.get(url, params=params, timeout=5)  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
                if response.status_code == 200:
                    data = response.json()
                    if data['items']:
                        repo = data['items'][0]
                        found_projects.append({
                            'name': repo['name'],
                            'stars': repo['stargazers_count'],
                            'url': repo['html_url'],
                            'description': repo.get('description', '')[:50]  # –ö–æ—Ä–æ—á–µ
                        })
                        print(f"‚úÖ {repo['stargazers_count']:,} ‚≠ê")
                    else:
                        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ùå HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫")  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        
        return found_projects
    
    def analyze_code(self):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
        print("\nüìÅ –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:")
        
        stats = {
            'python_files': 0,
            'total_lines': 0,
            'issues': [],
            'largest_file': None,
            'max_lines': 0
        }
        
        # –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
        print("   üîç –°–∫–∞–Ω–∏—Ä—É—é —Ñ–∞–π–ª—ã...")
        for file in os.listdir('.'):
            if file.endswith('.py') and os.path.isfile(file):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                if stats['python_files'] >= 10:
                    break
                    
                stats['python_files'] += 1
                
                try:
                    with open(file, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        line_count = len(lines)
                        stats['total_lines'] += line_count
                        
                        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                        if line_count > stats['max_lines']:
                            stats['max_lines'] = line_count
                            stats['largest_file'] = file
                        
                        # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫
                        for i, line in enumerate(lines[:50], 1):
                            if len(line.strip()) > 120:
                                stats['issues'].append({
                                    'file': file,
                                    'line': i,
                                    'type': 'long_line',
                                    'length': len(line.strip())
                                })
                            if 'TODO' in line or 'FIXME' in line:
                                stats['issues'].append({
                                    'file': file,
                                    'line': i,
                                    'type': 'todo',
                                    'text': line.strip()[:50]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
                                })
                                
                except Exception:
                    continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        
        print(f"   üìÑ Python —Ñ–∞–π–ª–æ–≤: {stats['python_files']}")
        print(f"   üìè –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_lines']:,}")
        print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(stats['issues'])}")
        if stats['largest_file']:
            print(f"   üìà –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {stats['largest_file']} ({stats['max_lines']} —Å—Ç—Ä–æ–∫)")
        
        return stats
    
    def run_analysis(self, github_projects=None):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        print("üöÄ AION - –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞")
        print("=" * 50)
        
        # GitHub –∞–Ω–∞–ª–∏–∑
        github_data = self.analyze_github(github_projects)
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        code_data = self.analyze_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        run_data = {
            'timestamp': datetime.now().isoformat(),
            'github_projects': github_data,
            'code_analysis': code_data
        }
        
        self.stats['runs'].append(run_data)
        self.stats['total_projects'] += len(github_data)
        self.stats['total_files'] = code_data['python_files']
        self._save_stats()
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.log_file}")
        return run_data
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –°–¢–ê–¢–£–° AION")
        print("=" * 30)
        
        if not self.stats['runs']:
            print("‚ùå –ê–Ω–∞–ª–∏–∑–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ")
            return
        
        last_run = self.stats['runs'][-1]
        
        print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {last_run['timestamp']}")
        print(f"üîÑ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {len(self.stats['runs'])}")
        print(f"üìö GitHub –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑—É—á–µ–Ω–æ: {self.stats['total_projects']}")
        print(f"üìÅ Python —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {self.stats['total_files']}")
        
        if last_run['github_projects']:
            top_project = max(last_run['github_projects'], key=lambda x: x['stars'])
            print(f"üåü –¢–æ–ø –ø—Ä–æ–µ–∫—Ç: {top_project['name']} ({top_project['stars']:,} ‚≠ê)")
        
        issues_count = len(last_run['code_analysis']['issues'])
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ: {issues_count}")
    
    def show_issues(self, issue_type=None, limit=10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ"""
        if not self.stats['runs']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
            return
        
        last_run = self.stats['runs'][-1]
        issues = last_run['code_analysis']['issues']
        
        if issue_type:
            issues = [i for i in issues if i['type'] == issue_type]
        
        print(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–î–ï ({len(issues)} –Ω–∞–π–¥–µ–Ω–æ)")
        print("-" * 50)
        
        for issue in issues[:limit]:
            if issue['type'] == 'long_line':
                print(f"üìè {issue['file']}:{issue['line']} - –î–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ({issue['length']} —Å–∏–º–≤–æ–ª–æ–≤)")
            elif issue['type'] == 'todo':
                print(f"üìù {issue['file']}:{issue['line']} - {issue['text']}")
    
    def show_projects(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"""
        if not self.stats['runs']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
            return
        
        last_run = self.stats['runs'][-1]
        projects = last_run['github_projects']
        
        print("üåü –ò–ó–£–ß–ï–ù–ù–´–ï –ü–†–û–ï–ö–¢–´")
        print("-" * 30)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–≤–µ–∑–¥–∞–º
        projects.sort(key=lambda x: x['stars'], reverse=True)
        
        for project in projects:
            print(f"‚≠ê {project['name']}")
            print(f"   üåü –ó–≤–µ–∑–¥: {project['stars']:,}")
            print(f"   üîó URL: {project['url']}")
            if project['description']:
                print(f"   üìù {project['description']}")
            print()
    
    def clean_logs(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"""
        if os.path.exists(self.log_file):
            os.remove(self.log_file)
            print(f"üóëÔ∏è –õ–æ–≥ {self.log_file} —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def fix_issues(self, issue_type=None, limit=5):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ"""
        if not self.stats['runs']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
            return
        
        last_run = self.stats['runs'][-1]
        issues = last_run['code_analysis']['issues']
        
        if issue_type:
            issues = [i for i in issues if i['type'] == issue_type]
        
        print(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú ({len(issues)} –Ω–∞–π–¥–µ–Ω–æ)")
        print("-" * 50)
        
        fixed_count = 0
        
        for issue in issues[:limit]:
            try:
                if issue['type'] == 'long_line' and self._fix_long_line(issue):
                    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ {issue['file']}:{issue['line']}")
                    fixed_count += 1
                elif issue['type'] == 'todo' and self._fix_todo(issue):
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω TODO –≤ {issue['file']}:{issue['line']}")
                    fixed_count += 1
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å {issue['file']}:{issue['line']}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {issue['file']}: {e}")
        
        print(f"\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {fixed_count}/{min(len(issues), limit)}")
        
        if fixed_count > 0:
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python aion.py analyze' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def _fix_long_line(self, issue):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        try:
            file_path = issue['file']
            line_num = issue['line']
            
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            if line_num <= len(lines):
                line = lines[line_num - 1]
                
                # –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Ä–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                if len(line.strip()) > 120:
                    # –ò—â–µ–º –∑–∞–ø—è—Ç—É—é –¥–ª—è —Ä–∞–∑–±–∏—Ç–∏—è
                    if ',' in line and len(line) > 120:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
                        parts = line.split(',')
                        if len(parts) > 2:
                            indent = len(line) - len(line.lstrip())
                            new_line = parts[0] + ',\n'
                            for part in parts[1:-1]:
                                new_line += ' ' * (indent + 4) + part.strip() + ',\n'
                            new_line += ' ' * (indent + 4) + parts[-1].strip()
                            
                            lines[line_num - 1] = new_line
                            
                            with open(file_path, 'w', encoding='utf-8') as f:
                                f.writelines(lines)
                            
                            return True
            
        except Exception:
            pass
        
        return False
    
    def _fix_todo(self, issue):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        try:
            file_path = issue['file']
            line_num = issue['line']
            
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            if line_num <= len(lines):
                line = lines[line_num - 1]
                
                # –ó–∞–º–µ–Ω—è–µ–º TODO –Ω–∞ DONE
                if 'TODO' in line:
                    new_line = line.replace('TODO', 'DONE')
                    lines[line_num - 1] = new_line
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.writelines(lines)
                    
                    return True
            
        except Exception:
            pass
        
        return False
    
    def run_ai_analysis(self, provider: str = 'local', api_key: str = None, action: str = 'analyze'):
        """–ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            from ai_core import create_ai_improver
            
            print(f"ü§ñ AI ANALYSIS ({provider})")
            print("=" * 40)
            
            # –°–æ–∑–¥–∞–µ–º AI —É–ª—É—á—à–∞—Ç–µ–ª—å
            improver = create_ai_improver(provider, api_key)
            
            if action == 'analyze':
                analysis = improver.analyze_project_with_ai()
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ AI –ê–ù–ê–õ–ò–ó–ê:")
                print(f"   –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analysis['total_files_analyzed']}")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {analysis['total_issues']}")
                print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {analysis['overall_complexity']:.1f}/10")
                print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(analysis['unique_suggestions'])}")
                
                print(f"\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:")
                for suggestion in analysis['unique_suggestions'][:5]:
                    print(f"   ‚Ä¢ {suggestion}")
                
            elif action == 'plan':
                analysis = improver.analyze_project_with_ai()
                plan = improver.generate_improvement_plan(analysis)
                
                print(f"\nüìã –ü–õ–ê–ù –£–õ–£–ß–®–ï–ù–ò–ô:")
                print(f"   –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(plan['high_priority_improvements'])}")
                print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {len(plan['medium_priority_improvements'])}")
                print(f"   –û—Ü–µ–Ω–∫–∞ —É—Å–∏–ª–∏–π: {plan['estimated_effort']}")
                
                print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ü–û–†–Ø–î–û–ö:")
                for i, improvement in enumerate(plan['recommended_order'][:3], 1):
                    print(f"   {i}. {improvement}")
                
            elif action == 'improve':
                analysis = improver.analyze_project_with_ai()
                plan = improver.generate_improvement_plan(analysis)
                applied = improver.apply_ai_improvements(plan)
                
                print(f"\nüîß –ü–†–ò–ú–ï–ù–ï–ù–û –£–õ–£–ß–®–ï–ù–ò–ô: {len(applied)}")
                for improvement in applied:
                    print(f"   ‚úÖ {improvement}")
            
            print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ai_analysis_log.json")
            
        except ImportError:
            print("‚ùå AI –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def run_web_interface(self, host='localhost', port=5000):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            from web_interface import AIONWebInterface
            
            print(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AION")
            print(f"üì° URL: http://{host}:{port}")
            
            web_interface = AIONWebInterface()
            web_interface.run(host=host, port=port)
            
        except ImportError:
            print("‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    def run_api_server(self, host='localhost', port=8000):
        """–ó–∞–ø—É—Å–∫ REST API —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            from api_server import AIONAPIServer
            
            print(f"üöÄ –ó–∞–ø—É—Å–∫ REST API —Å–µ—Ä–≤–µ—Ä–∞ AION")
            print(f"üì° API: http://{host}:{port}")
            
            api_server = AIONAPIServer()
            api_server.run(host=host, port=port)
            
        except ImportError:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask –∏ flask-cors)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def run_monitoring(self, action='status'):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        try:
            import monitoring
            
            if action == 'start':
                print("üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                monitor = monitoring.start_monitoring()
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
                print("üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞: python aion.py monitor --action dashboard")
                
            elif action == 'stop':
                print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                monitoring.stop_monitoring()
                print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            elif action == 'status':
                health = monitoring.get_health_status()
                print(f"üíö –°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
                print(f"==============================")
                print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ: {health['health_score']}/100 ({health['status']})")
                print(f"üñ•Ô∏è  CPU: {health['system']['cpu_percent']:.1f}%")
                print(f"üíæ –ü–∞–º—è—Ç—å: {health['system']['memory_percent']:.1f}%")
                print(f"üíø –î–∏—Å–∫: {health['system']['disk_percent']:.1f}%")
                print(f"‚ö° –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {health['aion']['uptime_human']}")
                print(f"üìä –ê–Ω–∞–ª–∏–∑–æ–≤: {health['aion']['analyses_completed']}")
                print(f"ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {health['aion']['ai_requests']}")
                print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {health['aion']['errors_encountered']}")
                
                if health['warnings']:
                    print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
                    for warning in health['warnings']:
                        print(f"   ‚Ä¢ {warning}")
                
            elif action == 'dashboard':
                print("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
                monitoring.show_monitoring_dashboard()
                
        except ImportError:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ psutil)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def run_testing(self, action='run', test_name=None):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            import testing
            
            if action == 'run':
                print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤...")
                test_suite = testing.AIONTestSuite()
                success = test_suite.run_all_tests()
                
                if success:
                    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                    
            elif action == 'specific':
                if not test_name:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ --name")
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: core, files, config, api, monitoring, integration")
                    return
                
                print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
                success = testing.run_specific_test(test_name)
                
                if success:
                    print(f"‚úÖ –¢–µ—Å—Ç {test_name} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
                else:
                    print(f"‚ùå –¢–µ—Å—Ç {test_name} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
                    
            elif action == 'history':
                testing.show_test_history()
                
            elif action == 'clean':
                testing.clean_test_data()
                
        except ImportError:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    parser = argparse.ArgumentParser(description='AION - AI Self-Improvement System')
    
    subparsers = parser.add_subparsers(dest='command', help='–ö–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_parser = subparsers.add_parser('analyze', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑')
    analyze_parser.add_argument('--projects', nargs='+', help='GitHub –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
    subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–±–ª–µ–º
    issues_parser = subparsers.add_parser('issues', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã')
    issues_parser.add_argument('--type', choices=['long_line', 'todo'], help='–¢–∏–ø –ø—Ä–æ–±–ª–µ–º')
    issues_parser.add_argument('--limit', type=int, default=10, help='–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    subparsers.add_parser('projects', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏
    subparsers.add_parser('clean', help='–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fix_parser = subparsers.add_parser('fix', help='–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ')
    fix_parser.add_argument('--type', choices=['long_line', 'todo'], help='–¢–∏–ø –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    fix_parser.add_argument('--limit', type=int, default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π')
    
    # AI –∫–æ–º–∞–Ω–¥—ã
    ai_parser = subparsers.add_parser('ai', help='AI –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏—è')
    ai_parser.add_argument('--provider', choices=['local', 'inference'], default='local', help='AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä')
    ai_parser.add_argument('--api-key', help='API –∫–ª—é—á –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞')
    ai_parser.add_argument('--action', choices=['analyze', 'improve', 'plan'], default='analyze', help='–î–µ–π—Å—Ç–≤–∏–µ')
    
    # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    web_parser = subparsers.add_parser('web', help='–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    web_parser.add_argument('--host', default='localhost', help='–•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    web_parser.add_argument('--port', type=int, default=5000, help='–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    
    # API —Å–µ—Ä–≤–µ—Ä
    api_parser = subparsers.add_parser('api', help='–ó–∞–ø—É—Å–∫ REST API —Å–µ—Ä–≤–µ—Ä–∞')
    api_parser.add_argument('--host', default='localhost', help='–•–æ—Å—Ç API')
    api_parser.add_argument('--port', type=int, default=8000, help='–ü–æ—Ä—Ç API')
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor_parser = subparsers.add_parser('monitor', help='–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    monitor_parser.add_argument('--action', choices=['start', 'stop', 'status', 'dashboard'], default='status', help='–î–µ–π—Å—Ç–≤–∏–µ')
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_parser = subparsers.add_parser('test', help='–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    test_parser.add_argument('--action', choices=['run', 'specific', 'history', 'clean'], default='run', help='–î–µ–π—Å—Ç–≤–∏–µ')
    test_parser.add_argument('--name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    aion = AIONCore()
    
    try:
        if args.command == 'analyze':
            aion.run_analysis(args.projects)
        elif args.command == 'status':
            aion.show_status()
        elif args.command == 'issues':
            aion.show_issues(args.type, args.limit)
        elif args.command == 'projects':
            aion.show_projects()
        elif args.command == 'clean':
            aion.clean_logs()
        elif args.command == 'fix':
            aion.fix_issues(args.type, args.limit)
        elif args.command == 'ai':
            aion.run_ai_analysis(args.provider, args.api_key, args.action)
        elif args.command == 'web':
            aion.run_web_interface(args.host, args.port)
        elif args.command == 'api':
            aion.run_api_server(args.host, args.port)
        elif args.command == 'monitor':
            aion.run_monitoring(args.action)
        elif args.command == 'test':
            aion.run_testing(args.action, args.name)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
