#!/usr/bin/env python3
"""
Code Analyzer - –ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞
"""

import logging
import json
import re
from datetime import datetime
from typing import Dict, List, Optional
import asyncio

logger = logging.getLogger(__name__)

class CodeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ —É–ª—É—á—à–∞—Ç–µ–ª—å –∫–æ–¥–∞"""
    
    def __init__(self, ai_system):
        self.ai_system = ai_system
        self.code_improvements = []
        self.last_improvement = None
        
    async def analyze_code_quality(self, code: str, language: str = "python") -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        try:
            analysis_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –Ω–∞ {language}:
            
            {code}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "quality_score": 0-100,
                "issues": ["—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º"],
                "improvements": ["—Å–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π"],
                "complexity": "low/medium/high",
                "maintainability": "low/medium/high"
            }}
            """
            
            response = await self.ai_system.call_gemma_api(analysis_prompt)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                json_match = re.search(r'\{.*\}', response, re.DOTALL)
                if json_match:
                    return json.loads(json_match.group())
                else:
                    return {
                        "quality_score": 70,
                        "issues": ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"],
                        "improvements": ["–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑"],
                        "complexity": "medium",
                        "maintainability": "medium"
                    }
            except:
                return {
                    "quality_score": 70,
                    "issues": ["–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"],
                    "improvements": ["–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑"],
                    "complexity": "medium",
                    "maintainability": "medium"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {e}")
            return {
                "quality_score": 50,
                "issues": ["–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"],
                "improvements": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é"],
                "complexity": "unknown",
                "maintainability": "unknown"
            }
    
    async def suggest_code_improvements(self, code: str, language: str = "python") -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∫–æ–¥–∞"""
        try:
            improvement_prompt = f"""
            –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ –Ω–∞ {language}:
            
            {code}
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
            1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
            2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            3. –£–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            4. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
            5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            """
            
            return await self.ai_system.call_gemma_api(improvement_prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è"
    
    async def auto_improve_code(self, file_path: str = None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞"""
        try:
            logger.info("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥
            if file_path is None:
                file_path = __file__
            
            with open(file_path, 'r', encoding='utf-8') as f:
                current_code = f.read()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality = await self.analyze_code_quality(current_code, "python")
            
            # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ 80, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            if quality.get("quality_score", 0) < 80:
                improvements = await self.suggest_code_improvements(current_code, "python")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                improvement_data = {
                    "timestamp": datetime.now().isoformat(),
                    "quality_score": quality.get("quality_score", 0),
                    "improvements": improvements,
                    "file": file_path
                }
                
                self.code_improvements.append(improvement_data)
                self.last_improvement = datetime.now()
                
                logger.info(f"üîß –ü—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è {file_path}")
                logger.info(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {quality.get('quality_score', 0)}%")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è: {e}")
    
    def get_improvements_history(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π"""
        return self.code_improvements
    
    def get_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        return {
            'improvements_count': len(self.code_improvements),
            'last_improvement': self.last_improvement.isoformat() if self.last_improvement else None,
            'analyzer_status': 'active'
        }
