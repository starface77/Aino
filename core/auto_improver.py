#!/usr/bin/env python3
"""
Auto Improver - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import time
import threading
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List
import json

logger = logging.getLogger(__name__)

class AutoImprover:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
    
    def __init__(self, ai_system, code_analyzer):
        self.ai_system = ai_system
        self.code_analyzer = code_analyzer
        self.auto_improvement_enabled = True
        self.improvement_interval = 3600  # 1 —á–∞—Å
        self.improvement_thread = None
        self.improvement_history = []
        
    def start_auto_improvement(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        if self.auto_improvement_enabled and not self.improvement_thread:
            self.improvement_thread = threading.Thread(target=self._improvement_loop, daemon=True)
            self.improvement_thread.start()
            logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞")
    
    def stop_auto_improvement(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        self.auto_improvement_enabled = False
        if self.improvement_thread:
            self.improvement_thread.join(timeout=5)
        logger.info("üõë –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _improvement_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è"""
        while self.auto_improvement_enabled:
            try:
                asyncio.run(self._run_improvement_cycle())
                time.sleep(self.improvement_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–ª—É—á—à–µ–Ω–∏—è: {e}")
                time.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _run_improvement_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ —É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            logger.info("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è...")
            
            # –£–ª—É—á—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã
            files_to_improve = [
                "ai/tendo-aino/run.py",
                "ai/tendo-aino/core/ai_system.py",
                "ai/tendo-aino/core/github_integration.py",
                "ai/tendo-aino/core/code_analyzer.py"
            ]
            
            for file_path in files_to_improve:
                try:
                    await self.code_analyzer.auto_improve_code(file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è {file_path}: {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
            await self._analyze_system_performance()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–ª—É—á—à–µ–Ω–∏–π
            improvement_record = {
                "timestamp": datetime.now().isoformat(),
                "files_improved": len(files_to_improve),
                "system_metrics": self.ai_system.get_metrics()
            }
            self.improvement_history.append(improvement_record)
            
            logger.info("‚úÖ –¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ —É–ª—É—á—à–µ–Ω–∏—è: {e}")
    
    async def _analyze_system_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            metrics = self.ai_system.get_metrics()
            
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if metrics.get('overall_performance', 1.0) < 0.8:
                optimization_prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
                
                {json.dumps(metrics, indent=2)}
                
                –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
                """
                
                optimization_suggestions = await self.ai_system.call_gemma_api(optimization_prompt)
                logger.info(f"üîß –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimization_suggestions[:200]}...")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def get_improvement_history(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π"""
        return self.improvement_history
    
    def get_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        return {
            'auto_improvement_enabled': self.auto_improvement_enabled,
            'improvement_interval': self.improvement_interval,
            'improvement_history_count': len(self.improvement_history),
            'last_improvement_cycle': self.improvement_history[-1]['timestamp'] if self.improvement_history else None,
            'improver_status': 'active' if self.auto_improvement_enabled else 'inactive'
        }
