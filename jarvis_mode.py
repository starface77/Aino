#!/usr/bin/env python3
"""
AION Interactive Terminal
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
"""

import os
import sys
import time
import subprocess
from datetime import datetime
import json

class AIONTerminal:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ AION"""
    
    def __init__(self):
        self.name = "AION"
        self.running = True
        self.context = {}
        self.commands_history = []
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self._print_welcome()
        
        while self.running:
            try:
                user_input = input(f"\n{self.name}> ").strip()
                
                if not user_input:
                    continue
                
                self.commands_history.append({
                    'timestamp': datetime.now().isoformat(),
                    'input': user_input
                })
                
                self._process_command(user_input)
                
            except KeyboardInterrupt:
                self._print_goodbye()
                break
            except EOFError:
                self._print_goodbye()
                break
    
    def _print_welcome(self):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        print("‚ö° AION Terminal v1.0")
        print("=" * 40)
        print("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞")
        print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print()
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("analyze project - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")
        print("show status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å") 
        print("fix issues - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        print("list projects - GitHub –ø—Ä–æ–µ–∫—Ç—ã")
        print("help - —Å–ø—Ä–∞–≤–∫–∞")
        print("exit - –≤—ã—Ö–æ–¥")
        print("=" * 40)
    
    def _print_goodbye(self):
        """–ü—Ä–æ—â–∞–Ω–∏–µ"""
        print(f"\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(self.commands_history)}")
        self.running = False
    
    def _process_command(self, user_input):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥
        cmd = user_input.lower().strip()
        
        print(f"[EXEC] {user_input}")
        time.sleep(0.3)
        
        # –í—ã—Ö–æ–¥
        if any(word in cmd for word in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', '–ø–æ–∫–∞', '—Å—Ç–æ–ø']):
            self._print_goodbye()
            return
        
        # –ü–æ–º–æ—â—å
        elif any(word in cmd for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —É–º–µ–µ—à—å']):
            self._show_help()
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        elif any(word in cmd for word in ['–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', 'analyze', '–ø—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–µ–∫—Ç']):
            self._analyze_project(user_input)
        
        # –°—Ç–∞—Ç—É—Å
        elif any(word in cmd for word in ['—Å—Ç–∞—Ç—É—Å', 'status', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–∫–∞–∫ –¥–µ–ª–∞']):
            self._show_status()
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        elif any(word in cmd for word in ['–ø—Ä–æ–±–ª–µ–º—ã', 'issues', '–æ—à–∏–±–∫–∏', '–±–∞–≥–∏']):
            self._show_issues(user_input)
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        elif any(word in cmd for word in ['–∏—Å–ø—Ä–∞–≤—å', 'fix', '–ø–æ—á–∏–Ω–∏', '—Ä–µ—à–∏']):
            self._fix_issues(user_input)
        
        # –ü—Ä–æ–µ–∫—Ç—ã GitHub
        elif any(word in cmd for word in ['–ø—Ä–æ–µ–∫—Ç—ã', 'projects', 'github', '—Ç–æ–ø']):
            self._show_projects()
        
        # –û—á–∏—Å—Ç–∫–∞
        elif any(word in cmd for word in ['–æ—á–∏—Å—Ç–∏', 'clean', '—É–¥–∞–ª–∏ –ª–æ–≥–∏']):
            self._clean_logs()
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        elif any(word in cmd for word in ['autogpt', 'pytorch', 'transformers', 'langchain']):
            self._analyze_specific_projects(user_input)
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        else:
            self._unknown_command(user_input)
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("üí° –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:")
        print()
        print("üìä –ê–ù–ê–õ–ò–ó:")
        print("  '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç' - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ GitHub")
        print("  '–ø—Ä–æ–≤–µ—Ä—å autogpt' - –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        print()
        print("üìà –°–¢–ê–¢–£–°:")
        print("  '–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å' - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        print("  '–∫–∞–∫ –¥–µ–ª–∞' - –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞")
        print()
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("  '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–±–ª–µ–º—ã' - —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
        print("  '–∏—Å–ø—Ä–∞–≤—å –ø—Ä–æ–±–ª–µ–º—ã' - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        print("  '–∏—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏' - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø")
        print()
        print("üåü –ü–†–û–ï–ö–¢–´:")
        print("  '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–µ–∫—Ç—ã' - –∏–∑—É—á–µ–Ω–Ω—ã–µ GitHub –ø—Ä–æ–µ–∫—Ç—ã")
        print()
        print("üóëÔ∏è –£–¢–ò–õ–ò–¢–´:")
        print("  '–æ—á–∏—Å—Ç–∏ –ª–æ–≥–∏' - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏")
        print()
        print("‚ùì –û–ë–©–ï–ï:")
        print("  '–ø–æ–º–æ—â—å' - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
        print("  '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    
    def _analyze_project(self, user_input):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        projects = None
        if 'autogpt' in user_input.lower():
            projects = ['AutoGPT']
        elif 'pytorch' in user_input.lower():
            projects = ['pytorch']
        elif 'transformers' in user_input.lower():
            projects = ['transformers']
        elif 'langchain' in user_input.lower():
            projects = ['langchain']
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        self._run_aion_command('analyze', projects)
    
    def _analyze_specific_projects(self, user_input):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        projects = []
        
        if 'autogpt' in user_input.lower():
            projects.append('AutoGPT')
        if 'pytorch' in user_input.lower():
            projects.append('pytorch')
        if 'transformers' in user_input.lower():
            projects.append('transformers')
        if 'langchain' in user_input.lower():
            projects.append('langchain')
        
        if projects:
            print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç—ã: {', '.join(projects)}")
            self._run_aion_command('analyze', projects)
        else:
            print("‚ùå –ù–µ –ø–æ–Ω—è–ª –∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
    
    def _show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        print("üìä –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
        self._run_aion_command('status')
    
    def _show_issues(self, user_input):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"""
        print("‚ö†Ô∏è –ò—â—É –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º
        issue_type = None
        limit = 10
        
        if '–¥–ª–∏–Ω–Ω' in user_input.lower() or 'long' in user_input.lower():
            issue_type = 'long_line'
            print("üîç –§–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö")
        elif 'todo' in user_input.lower() or '—Ç—É–¥—É' in user_input.lower():
            issue_type = 'todo'
            print("üîç –§–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")
        
        # –ò—â–µ–º –ª–∏–º–∏—Ç
        words = user_input.split()
        for word in words:
            if word.isdigit():
                limit = int(word)
                print(f"üî¢ –ü–æ–∫–∞–∑—ã–≤–∞—é {limit} –ø—Ä–æ–±–ª–µ–º")
                break
        
        self._run_aion_command('issues', None, issue_type, limit)
    
    def _fix_issues(self, user_input):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å
        issue_type = None
        limit = 5
        
        if '–¥–ª–∏–Ω–Ω' in user_input.lower() or 'long' in user_input.lower():
            issue_type = 'long_line'
            print("üéØ –ò—Å–ø—Ä–∞–≤–ª—è—é –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
        elif 'todo' in user_input.lower() or '—Ç—É–¥—É' in user_input.lower():
            issue_type = 'todo'
            print("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        else:
            print("üéØ –ò—Å–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ç–∏–ø—ã –ø—Ä–æ–±–ª–µ–º")
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        words = user_input.split()
        for word in words:
            if word.isdigit():
                limit = int(word)
                print(f"üî¢ –ò—Å–ø—Ä–∞–≤–ª—è—é {limit} –ø—Ä–æ–±–ª–µ–º")
                break
        
        self._run_aion_command('fix', None, issue_type, limit)
    
    def _show_projects(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã"""
        print("üåü –ü–æ–∫–∞–∑—ã–≤–∞—é –∏–∑—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã...")
        self._run_aion_command('projects')
    
    def _clean_logs(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"""
        print("üóëÔ∏è –û—á–∏—â–∞—é –ª–æ–≥–∏...")
        self._run_aion_command('clean')
    
    def _unknown_command(self, user_input):
        """–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        print(f"ü§∑ –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: '{user_input}'")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("  ‚Ä¢ '–ø–æ–º–æ—â—å' - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã")
        print("  ‚Ä¢ '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç' - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        print("  ‚Ä¢ '–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å' - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    
    def _run_aion_command(self, command, projects=None, issue_type=None, limit=None):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã AION"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            cmd = ['python', 'aion.py', command]
            
            if command == 'analyze' and projects:
                cmd.extend(['--projects'] + projects)
            
            if command in ['issues', 'fix']:
                if issue_type:
                    cmd.extend(['--type', issue_type])
                if limit:
                    cmd.extend(['--limit', str(limit)])
            
            print(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è—é: {' '.join(cmd)}")
            print("-" * 40)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8')
            
            if result.returncode == 0:
                print(result.stdout)
                print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
                print(result.stderr)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    terminal = AIONTerminal()
    terminal.start()

if __name__ == "__main__":
    main()
