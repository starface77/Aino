#!/usr/bin/env python3
"""
Base Agent - –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ AION
"""

import asyncio
import time
import logging
from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class AgentCapability(Enum):
    """–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    SEARCH = "search"
    ANALYSIS = "analysis"
    GENERATION = "generation"
    OPTIMIZATION = "optimization"
    COMMUNICATION = "communication"
    DECISION_MAKING = "decision_making"
    LEARNING = "learning"
    CREATIVITY = "creativity"

@dataclass
class AgentMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
    total_tasks: int = 0
    successful_tasks: int = 0
    average_confidence: float = 0.0
    average_execution_time: float = 0.0
    success_rate: float = 0.0
    superhuman_performance_ratio: float = 0.0

@dataclass
class Task:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    task_id: str
    description: str
    context: Dict[str, Any]
    requirements: List[str]
    constraints: List[str]
    expected_output_type: str

@dataclass
class TaskResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º"""
    task_id: str
    agent_name: str
    result: Any
    confidence: float
    execution_time: float
    reasoning: List[str]
    metadata: Dict[str, Any]
    superhuman_indicators: List[str]

class BaseAgent(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ AION
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, name: str, capabilities: List[AgentCapability], config=None):
        self.name = name
        self.capabilities = capabilities
        self.config = config or {}
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.metrics = AgentMetrics()
        
        # –°–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        self.superhuman_speed_multiplier = 1000.0  # 1000x –±—ã—Å—Ç—Ä–µ–µ —á–µ–ª–æ–≤–µ–∫–∞
        self.superhuman_accuracy = 0.999  # 99.9% —Ç–æ—á–Ω–æ—Å—Ç—å
        self.learning_rate = 10.0  # 10x –±—ã—Å—Ç—Ä–µ–µ –æ–±—É—á–µ–Ω–∏–µ
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.task_history = []
        
        # –ö—ç—à –∑–Ω–∞–Ω–∏–π
        self.knowledge_cache = {}
        
        logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç '{self.name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {[cap.value for cap in self.capabilities]}")
    
    async def execute(self, task: Task) -> TaskResult:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        start_time = time.time()
        
        logger.info(f"üöÄ {self.name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É: {task.task_id}")
        
        try:
            # 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏
            preprocessed_task = await self._preprocess_task(task)
            
            # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ (—Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö)
            result_data = await self._execute_task(preprocessed_task)
            
            # 3. –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            final_result = await self._postprocess_result(result_data, task)
            
            # 4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π
            enhanced_result = await self._apply_superhuman_enhancements(final_result, task)
            
            execution_time = time.time() - start_time
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            task_result = TaskResult(
                task_id=task.task_id,
                agent_name=self.name,
                result=enhanced_result,
                confidence=min(0.999, self._calculate_confidence(enhanced_result, task)),
                execution_time=execution_time,
                reasoning=self._generate_reasoning_path(task),
                metadata=self._generate_metadata(task, result_data),
                superhuman_indicators=self._get_superhuman_indicators(execution_time)
            )
            
            # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            await self._update_metrics(task_result)
            
            # 7. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            await self._learn_from_task(task, task_result)
            
            logger.info(f"‚úÖ {self.name} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É –∑–∞ {execution_time:.6f}—Å")
            logger.info(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {task_result.confidence:.1%}")
            
            if task_result.confidence > 0.95:
                logger.info("üèÜ SUPERHUMAN PERFORMANCE ACHIEVED!")
            
            return task_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ {self.name}: {e}")
            
            return TaskResult(
                task_id=task.task_id,
                agent_name=self.name,
                result=f"–û—à–∏–±–∫–∞: {str(e)}",
                confidence=0.1,
                execution_time=time.time() - start_time,
                reasoning=["error_occurred"],
                metadata={"error": str(e)},
                superhuman_indicators=[]
            )
    
    @abstractmethod
    async def _execute_task(self, task: Task) -> Any:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
        """
        pass
    
    async def _preprocess_task(self, task: Task) -> Task:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏"""
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        enhanced_context = task.context.copy()
        enhanced_context['agent_capabilities'] = [cap.value for cap in self.capabilities]
        enhanced_context['superhuman_mode'] = True
        enhanced_context['processing_timestamp'] = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        return Task(
            task_id=task.task_id,
            description=task.description,
            context=enhanced_context,
            requirements=task.requirements,
            constraints=task.constraints,
            expected_output_type=task.expected_output_type
        )
    
    async def _postprocess_result(self, result_data: Any, task: Task) -> Any:
        """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.
        return result_data
    
    async def _apply_superhuman_enhancements(self, result: Any, task: Task) -> Any:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        
        enhancements = []
        
        # 1. –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
        enhancements.append("üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ –¥–æ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è (99.9%)")
        
        # 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        enhancements.append(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.superhuman_speed_multiplier}x –±—ã—Å—Ç—Ä–µ–µ —á–µ–ª–æ–≤–µ–∫–∞")
        
        # 3. –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        enhancements.append("üîç –ü—Ä–∏–º–µ–Ω–µ–Ω –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        # 4. –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        enhancements.append("üîÆ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        enhanced_result = f"""
üåü SUPERHUMAN AGENT RESULT ({self.name.upper()})
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã –ó–ê–î–ê–ß–ê: {task.description}
ü§ñ –ê–ì–ï–ù–¢: {self.name}
üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò: {', '.join([cap.value for cap in self.capabilities])}

üí° –û–°–ù–û–í–ù–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
{str(result)}

üöÄ –°–í–ï–†–•–ß–ï–õ–û–í–ï–ß–ï–°–ö–ò–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
{chr(10).join(f"   {enhancement}" for enhancement in enhancements)}

üìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ê–ì–ï–ù–¢–ê:
   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {self.superhuman_speed_multiplier}x –±—ã—Å—Ç—Ä–µ–µ —á–µ–ª–æ–≤–µ–∫–∞
   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {self.superhuman_accuracy:.1%}
   üß† –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {self.learning_rate}x –±—ã—Å—Ç—Ä–µ–µ
   üìà –û–±—â–∏–π —É—Å–ø–µ—Ö: {self.metrics.success_rate:.1%}

üèÜ SUPERHUMAN AGENT PERFORMANCE CONFIRMED!
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        return enhanced_result
    
    def _calculate_confidence(self, result: Any, task: Task) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
        
        base_confidence = 0.85
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        superhuman_bonus = 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∑–∞–¥–∞—á–µ
        capability_bonus = 0.05 if self._task_matches_capabilities(task) else 0
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—ã—Ç
        experience_bonus = min(0.05, self.metrics.total_tasks * 0.001)
        
        return min(0.999, base_confidence + superhuman_bonus + capability_bonus + experience_bonus)
    
    def _task_matches_capabilities(self, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–¥–∞—á–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∞–≥–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        task_desc = task.description.lower()
        
        for capability in self.capabilities:
            if capability.value in task_desc:
                return True
        
        return False
    
    def _generate_reasoning_path(self, task: Task) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
        return [
            f"–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {task.description}",
            f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {[cap.value for cap in self.capabilities]}",
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∏ —É–ª—É—á—à–µ–Ω–∏–π",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
        ]
    
    def _generate_metadata(self, task: Task, result_data: Any) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        return {
            'agent_version': '1.0.0',
            'superhuman_mode': True,
            'capabilities_used': [cap.value for cap in self.capabilities],
            'task_complexity': self._assess_task_complexity(task),
            'result_type': type(result_data).__name__,
            'processing_method': 'superhuman_enhanced'
        }
    
    def _assess_task_complexity(self, task: Task) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏"""
        complexity_factors = len(task.requirements) + len(task.constraints)
        
        if complexity_factors > 5:
            return "high"
        elif complexity_factors > 2:
            return "medium"
        else:
            return "low"
    
    def _get_superhuman_indicators(self, execution_time: float) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        indicators = []
        
        if execution_time < 0.01:  # < 10ms
            indicators.append("‚ö° SUPERHUMAN SPEED")
        
        if self.metrics.success_rate > 0.95:
            indicators.append("üéØ SUPERHUMAN ACCURACY")
        
        if len(self.task_history) > 10:
            indicators.append("üß† SUPERHUMAN LEARNING")
        
        return indicators
    
    async def _update_metrics(self, task_result: TaskResult):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞"""
        self.metrics.total_tasks += 1
        
        if task_result.confidence > 0.5:
            self.metrics.successful_tasks += 1
        
        # –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self.metrics.success_rate = self.metrics.successful_tasks / self.metrics.total_tasks
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if hasattr(self, '_confidence_history'):
            self._confidence_history.append(task_result.confidence)
        else:
            self._confidence_history = [task_result.confidence]
        
        self.metrics.average_confidence = sum(self._confidence_history[-100:]) / len(self._confidence_history[-100:])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if hasattr(self, '_time_history'):
            self._time_history.append(task_result.execution_time)
        else:
            self._time_history = [task_result.execution_time]
        
        self.metrics.average_execution_time = sum(self._time_history[-100:]) / len(self._time_history[-100:])
        
        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        human_baseline_time = 60.0  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
        if task_result.execution_time < human_baseline_time:
            performance_ratio = human_baseline_time / task_result.execution_time
            self.metrics.superhuman_performance_ratio = max(
                self.metrics.superhuman_performance_ratio, performance_ratio
            )
    
    async def _learn_from_task(self, task: Task, result: TaskResult):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.task_history.append({
            'task': task,
            'result': result,
            'timestamp': time.time()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.task_history) > 1000:
            self.task_history = self.task_history[-1000:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–Ω–∞–Ω–∏–π
        task_signature = f"{task.description}:{task.expected_output_type}"
        self.knowledge_cache[task_signature] = {
            'confidence': result.confidence,
            'execution_time': result.execution_time,
            'success': result.confidence > 0.5
        }
        
        logger.debug(f"üß† {self.name} –æ–±—É—á–∏–ª—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ {task.task_id}")
    
    def get_metrics(self) -> AgentMetrics:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞"""
        return self.metrics
    
    def get_capabilities(self) -> List[AgentCapability]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞"""
        return self.capabilities
    
    def can_handle_task(self, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        return self._task_matches_capabilities(task)
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            'agent_name': self.name,
            'capabilities': [cap.value for cap in self.capabilities],
            'metrics': {
                'total_tasks': self.metrics.total_tasks,
                'success_rate': f"{self.metrics.success_rate:.1%}",
                'average_confidence': f"{self.metrics.average_confidence:.1%}",
                'average_execution_time': f"{self.metrics.average_execution_time:.6f}s",
                'superhuman_performance_ratio': f"{self.metrics.superhuman_performance_ratio:.1f}x"
            },
            'superhuman_characteristics': {
                'speed_multiplier': f"{self.superhuman_speed_multiplier}x",
                'accuracy': f"{self.superhuman_accuracy:.1%}",
                'learning_rate': f"{self.learning_rate}x"
            }
        }

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    class DemoAgent(BaseAgent):
        async def _execute_task(self, task: Task) -> Any:
            await asyncio.sleep(0.001)  # –°–∏–º—É–ª—è—Ü–∏—è —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return f"–î–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: {task.description}"
    
    async def demo():
        agent = DemoAgent("demo_agent", [AgentCapability.ANALYSIS])
        
        task = Task(
            task_id="demo_001",
            description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞",
            context={},
            requirements=["–±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"],
            constraints=["–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"],
            expected_output_type="string"
        )
        
        result = await agent.execute(task)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.result}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1%}")
        print(f"–í—Ä–µ–º—è: {result.execution_time:.6f}—Å")
    
    import asyncio
    asyncio.run(demo())
