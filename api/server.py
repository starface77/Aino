#!/usr/bin/env python3
"""
AION API Server - FastAPI —Å–µ—Ä–≤–µ—Ä —Å Gemini 1.5 Flash –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import uvicorn
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import asyncio
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.aion_engine import aion_engine, AIONResponse, TaskType
# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ aion_core –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏

app = FastAPI(
    title="AION API",
    description="–°–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ —Å Gemini 1.5 Flash –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
    version="2.0.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ aion_engine

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatRequest(BaseModel):
    message: str
    context: Optional[Dict[str, Any]] = None
    capabilities: Optional[Dict[str, bool]] = None
    parameters: Optional[Dict[str, float]] = None
    user_id: Optional[str] = "default"
    session_id: Optional[str] = None

class ChatResponse(BaseModel):
    content: str
    confidence: float
    reasoning: str
    execution_time: float
    model_used: str
    timestamp: str
    context_used: Optional[List[Dict[str, Any]]] = None
    learning_insights: Optional[Dict[str, Any]] = None
    intent_analysis: Optional[Dict[str, Any]] = None
    entities_detected: Optional[List[Dict[str, Any]]] = None

class StatsResponse(BaseModel):
    total_requests: int
    model_status: str
    conversation_length: int
    last_activity: Optional[str] = None
    learning_metrics: Optional[Dict[str, Any]] = None
    context_memory_stats: Optional[Dict[str, Any]] = None

class MarketDataRequest(BaseModel):
    marketplace: str
    include_trends: bool = True

class MarketDataResponse(BaseModel):
    marketplace: str
    data: Dict[str, Any]
    trends: Optional[List[str]] = None
    timestamp: str

class LearningUpdateRequest(BaseModel):
    user_id: str
    task_type: str
    success_rate: float
    feedback: Optional[str] = None

# API endpoints
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "üß† AION API v2.0 - –°–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
        "version": "2.0.0",
        "model": "Gemma 3 27B",
        "status": "Active",
        "capabilities": [
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å",
            "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 
            "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "–î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
            "–£–ª—É—á—à–µ–Ω–Ω—ã–π NLP",
            "–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"
        ]
    }

@app.post("/api/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    start_time = time.time()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        aion_engine.add_to_history("user", request.message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π AION Engine
        response = await aion_engine.process_request(request.message, {
            'user_id': request.user_id,
            'session_id': request.session_id,
            'capabilities': request.capabilities,
            'parameters': request.parameters
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        aion_engine.add_to_history("assistant", response.content)
        
        execution_time = time.time() - start_time
        
        return ChatResponse(
            content=response.content,
            confidence=response.confidence,
            reasoning=response.reasoning,
            execution_time=execution_time,
            model_used=response.model_used,
            timestamp=response.timestamp.isoformat(),
            context_used=response.context_used,
            learning_insights=response.learning_insights,
            intent_analysis={},
            entities_detected=[]
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

@app.post("/api/market-data", response_model=MarketDataResponse)
async def get_market_data(request: MarketDataRequest):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        market_data = {
            'marketplace': request.marketplace,
            'status': 'active',
            'performance': 'excellent',
            'trends': ['growth', 'innovation', 'expansion']
        }
        
        trends = market_data.get('trends', []) if request.include_trends else None
        
        return MarketDataResponse(
            marketplace=request.marketplace,
            data=market_data,
            trends=trends,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@app.get("/api/tech-trends")
async def get_tech_trends():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
    try:
        trends = [
            "AI/ML Integration",
            "Cloud Computing",
            "Edge Computing", 
            "Blockchain",
            "IoT Development"
        ]
        return {
            "trends": trends,
            "timestamp": datetime.now().isoformat(),
            "source": "AION Engine"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")

@app.post("/api/learning/update")
async def update_learning(request: LearningUpdateRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    try:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –æ–±—É—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ –¥–≤–∏–∂–æ–∫
        
        return {
            "status": "success",
            "message": "–û–±—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            "user_id": request.user_id,
            "task_type": request.task_type,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: {str(e)}")

@app.get("/api/learning/approach/{user_id}/{task_type}")
async def get_learning_approach(user_id: str, task_type: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        approach = aion_engine.learning_system.get_optimized_approach(user_id, task_type)
        return {
            "user_id": user_id,
            "task_type": task_type,
            "approach": approach,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∞: {str(e)}")

@app.get("/api/context/memory")
async def get_context_memory():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        return {
            "conversation_history_length": len(aion_engine.context_memory.conversation_history),
            "user_preferences_count": 0,
            "task_context_count": 0,
            "external_data_cache_count": 0,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}")

@app.post("/api/context/clear")
async def clear_context_memory():
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        aion_engine.context_memory.conversation_history.clear()
        
        return {
            "status": "success",
            "message": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {str(e)}")

@app.get("/api/nlp/analyze")
async def analyze_text(text: str):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ NLP"""
    try:
        intent = aion_engine.nlp_processor.extract_intent(text)
        entities = aion_engine.nlp_processor.extract_entities(text)
        
        return {
            "text": text,
            "intent_analysis": intent,
            "entities_detected": entities,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
    try:
        stats = aion_engine.get_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        learning_metrics = {
            "total_users": 1,
            "total_patterns": 5,
            "average_success_rate": 0.85  # –°–∏–º—É–ª—è—Ü–∏—è
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏
        context_memory_stats = {
            "conversation_history_size": len(aion_engine.context_memory.conversation_history),
            "user_preferences_count": 0,
            "external_data_cache_size": 0
        }
        
        return {
            "total_requests": stats['total_requests'],
            "model_status": stats['model_status'],
            "conversation_length": stats['conversation_length'],
            "last_activity": stats.get('last_activity'),
            "average_response_time": 0.5,  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            "confidence": 0.98,  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            "active_agents": 1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            "learning_metrics": learning_metrics,
            "context_memory_stats": context_memory_stats
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@app.get("/api/capabilities")
async def get_capabilities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "version": "2.0.0",
        "capabilities": {
            "nlp": {
                "intent_extraction": True,
                "entity_recognition": True,
                "sentiment_analysis": True,
                "context_understanding": True
            },
            "learning": {
                "adaptive_learning": True,
                "user_pattern_recognition": True,
                "performance_optimization": True
            },
            "data": {
                "real_time_processing": True,
                "market_data_analysis": True,
                "trend_detection": True,
                "caching": True
            },
            "context": {
                "memory_management": True,
                "conversation_history": True,
                "user_preferences": True,
                "external_data_integration": True
            }
        },
        "models": {
            "primary": "Gemini 1.5 Flash",
            "nlp": "Enhanced NLP Processor",
            "learning": "Adaptive Learning System"
        },
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
