#!/usr/bin/env python3
"""
Logger - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è AION
"""

import logging
import sys
import os
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any
import json

class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[35m', # Magenta
        'RESET': '\033[0m'      # Reset
    }
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        levelname = record.levelname
        if levelname in self.COLORS:
            record.levelname = f"{self.COLORS[levelname]}{levelname}{self.COLORS['RESET']}"
        
        return super().format(record)

class AIONLogger:
    """
    –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è AION —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
    - –¶–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–¥—É–ª—è–º
    """
    
    def __init__(self, name: str = "AION", config: Dict[str, Any] = None):
        self.name = name
        self.config = config or {}
        self.logger = logging.getLogger(name)
        self.setup_logging()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = self.config.get('log_level', 'INFO')
        self.logger.setLevel(getattr(logging, log_level.upper()))
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if self.config.get('enable_console_logging', True):
            self._setup_console_handler()
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if self.config.get('enable_file_logging', True):
            self._setup_file_handler()
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.logger.propagate = False
    
    def _setup_console_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        
        console_handler = logging.StreamHandler(sys.stdout)
        
        # –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_format = "%(asctime)s | %(levelname)s | %(name)s | %(message)s"
        console_formatter = ColoredFormatter(console_format)
        console_handler.setFormatter(console_formatter)
        
        self.logger.addHandler(console_handler)
    
    def _setup_file_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª —Å –¥–∞—Ç–æ–π
        log_file = self.config.get('log_file')
        if not log_file:
            timestamp = datetime.now().strftime("%Y%m%d")
            log_file = log_dir / f"aion_{timestamp}.log"
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
        file_format = "%(asctime)s | %(levelname)s | %(name)s | %(funcName)s:%(lineno)d | %(message)s"
        file_formatter = logging.Formatter(file_format)
        file_handler.setFormatter(file_formatter)
        
        self.logger.addHandler(file_handler)
    
    def debug(self, message: str, **kwargs):
        """Debug —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self._log_with_context(logging.DEBUG, message, **kwargs)
    
    def info(self, message: str, **kwargs):
        """Info —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self._log_with_context(logging.INFO, message, **kwargs)
    
    def warning(self, message: str, **kwargs):
        """Warning —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self._log_with_context(logging.WARNING, message, **kwargs)
    
    def error(self, message: str, **kwargs):
        """Error —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self._log_with_context(logging.ERROR, message, **kwargs)
    
    def critical(self, message: str, **kwargs):
        """Critical —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self._log_with_context(logging.CRITICAL, message, **kwargs)
    
    def superhuman(self, message: str, **kwargs):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        enhanced_message = f"üèÜ SUPERHUMAN: {message}"
        self._log_with_context(logging.INFO, enhanced_message, **kwargs)
    
    def performance(self, operation: str, execution_time: float, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        message = f"‚ö° PERFORMANCE: {operation} completed in {execution_time:.6f}s"
        self._log_with_context(logging.INFO, message, **kwargs)
    
    def task_completed(self, task_id: str, confidence: float, execution_time: float, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        message = f"‚úÖ TASK: {task_id} | Confidence: {confidence:.1%} | Time: {execution_time:.6f}s"
        self._log_with_context(logging.INFO, message, **kwargs)
    
    def _log_with_context(self, level: int, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if kwargs:
            context_str = " | ".join(f"{k}={v}" for k, v in kwargs.items())
            message = f"{message} | {context_str}"
        
        self.logger.log(level, message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
_loggers: Dict[str, AIONLogger] = {}

def setup_logging(config: Dict[str, Any] = None) -> AIONLogger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è AION
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        AIONLogger: –ì–ª–∞–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    
    main_logger = AIONLogger("AION", config)
    _loggers["AION"] = main_logger
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
    component_configs = {
        "AION.Core": config,
        "AION.Engine": config,
        "AION.Intelligence": config,
        "AION.Reasoning": config,
        "AION.Agents": config,
        "AION.Utils": config
    }
    
    for component, component_config in component_configs.items():
        _loggers[component] = AIONLogger(component, component_config)
    
    main_logger.info("üöÄ AION Logging System initialized")
    return main_logger

def get_logger(name: str = "AION") -> AIONLogger:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
    
    Returns:
        AIONLogger: –õ–æ–≥–≥–µ—Ä
    """
    
    if name not in _loggers:
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        _loggers[name] = AIONLogger(name)
    
    return _loggers[name]

def log_system_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    
    logger = get_logger("AION.System")
    
    logger.info("üìã System Information:")
    logger.info(f"   üêç Python: {sys.version}")
    logger.info(f"   üíª Platform: {sys.platform}")
    logger.info(f"   üìÅ Working Directory: {os.getcwd()}")
    logger.info(f"   üïê Timestamp: {datetime.now().isoformat()}")

def log_config(config: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    logger = get_logger("AION.Config")
    
    logger.info("‚öôÔ∏è Configuration loaded:")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã)
    safe_config = {}
    sensitive_keys = ['password', 'secret', 'key', 'token']
    
    for key, value in config.items():
        if any(sensitive in key.lower() for sensitive in sensitive_keys):
            safe_config[key] = "***HIDDEN***"
        else:
            safe_config[key] = value
    
    logger.info(f"   üìã Config: {json.dumps(safe_config, indent=2, default=str)}")

class LoggingMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–ª–∞—Å—Å—ã"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.logger = get_logger(f"AION.{self.__class__.__name__}")
    
    def log_debug(self, message: str, **kwargs):
        """Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.debug(f"[{self.__class__.__name__}] {message}", **kwargs)
    
    def log_info(self, message: str, **kwargs):
        """Info –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.info(f"[{self.__class__.__name__}] {message}", **kwargs)
    
    def log_warning(self, message: str, **kwargs):
        """Warning –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.warning(f"[{self.__class__.__name__}] {message}", **kwargs)
    
    def log_error(self, message: str, **kwargs):
        """Error –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.error(f"[{self.__class__.__name__}] {message}", **kwargs)
    
    def log_performance(self, operation: str, execution_time: float, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.logger.performance(f"[{self.__class__.__name__}] {operation}", execution_time, **kwargs)
    
    def log_superhuman(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        self.logger.superhuman(f"[{self.__class__.__name__}] {message}", **kwargs)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
def log_execution(logger_name: str = "AION"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    
    Args:
        logger_name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
    """
    
    def decorator(func):
        def wrapper(*args, **kwargs):
            logger = get_logger(logger_name)
            start_time = datetime.now()
            
            logger.debug(f"üöÄ Starting {func.__name__}")
            
            try:
                result = func(*args, **kwargs)
                execution_time = (datetime.now() - start_time).total_seconds()
                logger.performance(f"{func.__name__}", execution_time)
                return result
            
            except Exception as e:
                logger.error(f"‚ùå Error in {func.__name__}: {e}")
                raise
        
        return wrapper
    return decorator

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    config = {
        'log_level': 'DEBUG',
        'enable_console_logging': True,
        'enable_file_logging': True
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    main_logger = setup_logging(config)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    main_logger.debug("üîç Debug message")
    main_logger.info("‚ÑπÔ∏è Info message")
    main_logger.warning("‚ö†Ô∏è Warning message")
    main_logger.error("‚ùå Error message")
    main_logger.superhuman("üèÜ Superhuman achievement!")
    main_logger.performance("test_operation", 0.001234)
    main_logger.task_completed("test_001", 0.95, 0.00567)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    core_logger = get_logger("AION.Core")
    core_logger.info("Core component message")
    
    agent_logger = get_logger("AION.Agents")
    agent_logger.info("Agent component message")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    log_system_info()
    
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª logs/aion_*.log –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞")
